"""
Django settings for Infograins_site project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from . import s
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
from django.core.exceptions import ImproperlyConfigured
from django.conf import settings


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = s.SECRET_KEY


# GOOGLE_RECAPTCHA_SITE_KEY = '6LeVudcbAAAAANNYrVLCvGnGfLGm3XIGngYpr8tU'

GOOGLE_RECAPTCHA_SECRET_KEY = '6LcXadUbAAAAAENP0qXh1NYx9zvPIsdAKt1zciiQ' 

# ======================================================================

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')

PREPEND_WWW = False
SECURE_SSL_REDIRECT = False

# ==============================DEBUG=================================



# SECURITY WARNING: don't run with debug turned on in production!




DEBUG = True





# ==========================================================================

ALLOWED_HOSTS = []


# Application definition




# ======================newCKeditor=======================
CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'
CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': None,
    },
}
# ======================newCKeditor=======================


INSTALLED_APPS = [
    # 'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Infograins.apps.InfograinsConfig',
    'ckeditor',
    'django.contrib.sitemaps',
    'phone_field',
    'django.contrib.sites',
    'ckeditor_uploader',
    'django_json_ld',
    
    
    
]

SITE_ID=1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'redirect_to_non_www.middleware.RedirectToNonWww',
]

ROOT_URLCONF = 'Infograins_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "Infograins",

    # Title on the brand, and login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "Infograins Admin",

    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home",  "url": "admin:index", "permissions": ["auth.view_user"]},



        # model admin to link to (Permissions checked against model)
        {"model": "auth.User"},

        # App with dropdown menu to all its models pages (Permissions checked against models)
        {"app": "books"},
    ],
}

# WSGI_APPLICATION = 'Infograins_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com' 
# EMAIL_PORT = 587 
# EMAIL_HOST_USER ='computerprograming7999@gmail.com' 
# EMAIL_HOST_PASSWORD ='Meena@123' 
# EMAIL_USE_TLS = True 

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' 
EMAIL_HOST = 'mail.infograins.com'
EMAIL_PORT = 587 
EMAIL_HOST_USER = 'kapilyadav@infograins.com'
EMAIL_HOST_PASSWORD = 'Yadav@1357' 
EMAIL_USE_TLS = True





CONTEXT_ATTRIBUTE = getattr(settings, 'JSON_LD_CONTEXT_ATTRIBUTE', 'sd')
MODEL_ATTRIBUTE = getattr(settings,   'JSON_LD_MODEL_ATTRIBUTE', 'sd')

DEFAULT_CONTEXT = getattr(settings, 'JSON_LD_DEFAULT_CONTEXT', 'https://schema.org/')
DEFAULT_TYPE = getattr(settings,    'JSON_LD_DEFAULT_TYPE', 'Product')
JSON_INDENT = getattr(settings,     'JSON_LD_INDENT', None)
GENERATE_URL = getattr(settings,    'JSON_LD_GENERATE_URL', True)

valid_empty_input_rendering_settings = [
    'strict', 'silent', 'generate_thing'
]

EMPTY_INPUT_RENDERING = getattr(settings, 'JSON_LD_EMPTY_INPUT_RENDERING', 'strict')

err = ''
if EMPTY_INPUT_RENDERING not in valid_empty_input_rendering_settings:
    err += 'Invalid value for JSON_LD_EMPTY_INPUT_RENDERING setting. '
    err += 'Expected one of {}, but got "{}". '.format(
        valid_empty_input_rendering_settings,
        EMPTY_INPUT_RENDERING
    )
if not (JSON_INDENT is None or isinstance(JSON_INDENT, int) and JSON_INDENT >= 0) :
    err += 'Invalid value for JSON_LD_INDENT setting. '
    err += 'Expected None or a non-negative integer. '

if err:
    raise ImproperlyConfigured(err.strip())